# ELA Data Platform - DEV Environment Ingestion Configuration
# This file defines all data ingestion jobs for DEVELOPMENT environment
# DEV environment uses more frequent schedules for testing and development

# Global Configuration
global:
  timezone: "Europe/Paris"
  retry_attempts: 2
  max_parallel_jobs: 3
  gcs_bucket: "ela-dp-dev"
  timeout_minutes: 15
  environment: "dev"

# Job Groups for manual execution
job_groups:
  spotify_all:
    description: "All Spotify data sources (DEV)"
    jobs: ["spotify_recently_played", "spotify_saved_tracks", "spotify_saved_albums", "spotify_playlists", "spotify_top_tracks", "spotify_top_artists"]
  
  fitness_all:
    description: "All fitness data sources (DEV)"
    jobs: ["strava_activities", "strava_athlete", "garmin_activities", "garmin_sleep", "garmin_heart_rate"]
  
  productivity_all:
    description: "All productivity data sources (DEV)"
    jobs: ["todoist_tasks", "todoist_projects"]
  
  frequent_jobs:
    description: "Frequently running jobs for development testing"
    jobs: ["spotify_recently_played", "strava_activities", "garmin_activities", "todoist_tasks"]
  
  daily_jobs:
    description: "Jobs that run daily (DEV)"
    jobs: ["spotify_saved_tracks", "garmin_sleep", "todoist_projects"]

  # Data Fetching Groups (Step 1)
  garmin_fetch_all:
    description: "Fetch all Garmin data (Step 1/2)"
    jobs: ["garmin_activities", "garmin_sleep", "garmin_steps", "garmin_heart_rate", "garmin_body_battery", "garmin_stress", "garmin_training_status", "garmin_hrv", "garmin_race_predictions", "garmin_floors"]
  
  strava_fetch_all:
    description: "Fetch all Strava data (Step 1/2)"
    jobs: ["strava_activities", "strava_athlete"]
  
  spotify_fetch_all:
    description: "Fetch all Spotify data (Step 1/2)"
    jobs: ["spotify_recently_played", "spotify_saved_tracks", "spotify_saved_albums"]
  
  # Data Ingestion Groups (Step 2)
  ingestion_only:
    description: "Run only ingestion jobs - GCS → BigQuery (Step 2/2)"
    jobs: ["garmin_ingest", "strava_ingest", "spotify_ingest"]
  
  garmin_ingest_only:
    description: "Ingest Garmin data only - GCS → BigQuery"
    jobs: ["garmin_ingest"]
  
  # Legacy Combined Pipelines (runs in parallel - use with caution)
  garmin_pipeline:
    description: "Complete Garmin pipeline (parallel execution - may have timing issues)"
    jobs: ["garmin_activities", "garmin_sleep", "garmin_steps", "garmin_heart_rate", "garmin_body_battery", "garmin_stress", "garmin_training_status", "garmin_hrv", "garmin_race_predictions", "garmin_floors", "garmin_ingest"]
  
  strava_pipeline:
    description: "Complete Strava pipeline (parallel execution - may have timing issues)"
    jobs: ["strava_activities", "strava_athlete", "strava_ingest"]
  
  spotify_pipeline:
    description: "Complete Spotify pipeline (parallel execution - may have timing issues)"
    jobs: ["spotify_recently_played", "spotify_saved_tracks", "spotify_ingest"]

# Individual Jobs Configuration - DEV Environment
jobs:
  # =================== SPOTIFY JOBS (DEV) ===================
  spotify_recently_played:
    service: "spotify"
    data_type: "recently_played"
    description: "Fetch recently played tracks from Spotify every 3 hours (9am-midnight Paris)"
    cron: "0 8,11,14,17,20,23 * * *"  # Every 3 hours from 9am to midnight Paris time (8am-11pm UTC)
    command: "python -m src.connectors.spotify.spotify_fetch recently_played --limit 50"
    environment: "dev"
    enabled: true
    dependencies: ["SPOTIFY_CLIENT_ID", "SPOTIFY_CLIENT_SECRET", "SPOTIFY_REDIRECT_URI", "SPOTIFY_REFRESH_TOKEN"]

  spotify_saved_tracks:
    service: "spotify"
    data_type: "saved_tracks"
    description: "Fetch last 20 saved tracks from Spotify daily at midday Paris time"
    cron: "0 11,23 * * *"  # Daily at 11:00 UTC (12:00 Paris time)
    command: "python -m src.connectors.spotify.spotify_fetch saved_tracks --limit 50"
    environment: "dev"
    enabled: true
    dependencies: ["SPOTIFY_CLIENT_ID", "SPOTIFY_CLIENT_SECRET", "SPOTIFY_REDIRECT_URI", "SPOTIFY_REFRESH_TOKEN"]

  spotify_saved_albums:
    service: "spotify"
    data_type: "saved_albums"
    description: "Fetch last 10 saved albums from Spotify daily at midday Paris time"
    cron: "0 11,23 * * *"  # Daily at 11:00 UTC (12:00 Paris time)
    command: "python -m src.connectors.spotify.spotify_fetch saved_albums --limit 50"
    environment: "dev"
    enabled: true
    dependencies: ["SPOTIFY_CLIENT_ID", "SPOTIFY_CLIENT_SECRET", "SPOTIFY_REDIRECT_URI", "SPOTIFY_REFRESH_TOKEN"]

  spotify_playlists:
    service: "spotify"
    data_type: "playlists"
    description: "Fetch user playlists from Spotify (DEV - weekly testing)"
    cron: "0 14 * * 1"  # Weekly on Mondays at 14:00 UTC
    command: "python -m src.connectors.spotify.spotify_fetch playlists --limit 25"
    environment: "dev"
    enabled: false
    dependencies: ["SPOTIFY_CLIENT_ID", "SPOTIFY_CLIENT_SECRET", "SPOTIFY_REDIRECT_URI", "SPOTIFY_REFRESH_TOKEN"]

  spotify_top_tracks:
    service: "spotify"
    data_type: "top_tracks"
    description: "Fetch top tracks from Spotify (DISABLED - not useful)"
    cron: "0 15 * * 1"  # Weekly on Mondays at 15:00 UTC
    command: "python -m src.connectors.spotify.spotify_fetch top_tracks --limit 25 --time-range medium_term"
    environment: "dev"
    enabled: false
    dependencies: ["SPOTIFY_CLIENT_ID", "SPOTIFY_CLIENT_SECRET", "SPOTIFY_REDIRECT_URI", "SPOTIFY_REFRESH_TOKEN"]

  spotify_top_artists:
    service: "spotify"
    data_type: "top_artists"
    description: "Fetch top artists from Spotify (DISABLED - not useful)"
    cron: "0 16 * * 1"  # Weekly on Mondays at 16:00 UTC
    command: "python -m src.connectors.spotify.spotify_fetch top_artists --limit 25 --time-range medium_term"
    environment: "dev"
    enabled: false
    dependencies: ["SPOTIFY_CLIENT_ID", "SPOTIFY_CLIENT_SECRET", "SPOTIFY_REDIRECT_URI", "SPOTIFY_REFRESH_TOKEN"]

  # =================== STRAVA JOBS (DEV) ===================
  strava_activities:
    service: "strava"
    data_type: "activities"
    description: "Fetch activities from Strava (DEV - frequent testing)"
    cron: "0 */2 * * *"  # Every 2 hours for testing
    command: "python -m src.connectors.strava.strava"
    environment: "dev"
    enabled: false
    dependencies: ["STRAVA_CLIENT_ID", "STRAVA_CLIENT_SECRET", "STRAVA_REFRESH_TOKEN"]

  strava_athlete:
    service: "strava"
    data_type: "athlete"
    description: "Fetch athlete profile from Strava (DEV - daily testing)"
    cron: "0 12 * * *"  # Daily at 12:00 UTC for testing
    command: "python -m src.connectors.strava.strava --athlete"
    environment: "dev"
    enabled: false
    dependencies: ["STRAVA_CLIENT_ID", "STRAVA_CLIENT_SECRET", "STRAVA_REFRESH_TOKEN"]

  # =================== GARMIN JOBS (DEV) ===================
  garmin_activities:
    service: "garmin"
    data_type: "activities"
    description: "Fetch activities from Garmin (DEV - frequent testing)"
    cron: "0 11 * * *"  # Every 2 hours for testing
    command: "python -m src.connectors.garmin.garmin_fetch --data-types activities --days 2"
    environment: "dev"
    enabled: true
    dependencies: ["GARMIN_USERNAME", "GARMIN_PASSWORD"]

  garmin_sleep:
    service: "garmin"
    data_type: "sleep"
    description: "Fetch sleep data from Garmin (DEV - daily testing)"
    cron: "0 11 * * *"  # Daily at 13:00 UTC for testing
    command: "python -m src.connectors.garmin.garmin_fetch --data-types sleep --days 1"
    environment: "dev"
    enabled: true
    dependencies: ["GARMIN_USERNAME", "GARMIN_PASSWORD"]

  garmin_steps:
    service: "garmin"
    data_type: "steps"
    description: "Fetch steps data from Garmin (DEV - every 4 hours)"
    cron: "0 11 * * *"  # Daily at 12:00 UTC for testing
    command: "python -m src.connectors.garmin.garmin_fetch --data-types steps --days 1"
    environment: "dev"
    enabled: true
    dependencies: ["GARMIN_USERNAME", "GARMIN_PASSWORD"]

  garmin_heart_rate:
    service: "garmin"
    data_type: "heart_rate"
    description: "Fetch heart rate data from Garmin (DEV - every 4 hours)"
    cron: "0 11 * * *"  # Every 4 hours for testing
    command: "python -m src.connectors.garmin.garmin_fetch --data-types heart_rate --days 1"
    environment: "dev"
    enabled: true
    dependencies: ["GARMIN_USERNAME", "GARMIN_PASSWORD"]

  garmin_body_battery:
    service: "garmin"
    data_type: "body_battery"
    description: "Fetch body battery data from Garmin (DEV - every 4 hours)"
    cron: "0 11 * * *"  # Every 4 hours for testing
    command: "python -m src.connectors.garmin.garmin_fetch --data-types body_battery --days 1"
    environment: "dev"
    enabled: true
    dependencies: ["GARMIN_USERNAME", "GARMIN_PASSWORD"]

  garmin_stress:
    service: "garmin"
    data_type: "stress"
    description: "Fetch stress data from Garmin (DEV - every 4 hours)"
    cron: "0 11 * * *"  # Every 4 hours for testing
    command: "python -m src.connectors.garmin.garmin_fetch --data-types stress --days 1"
    environment: "dev"
    enabled: true
    dependencies: ["GARMIN_USERNAME", "GARMIN_PASSWORD"]

  garmin_training_status:
    service: "garmin"
    data_type: "training_status"
    description: "Fetch training status data from Garmin (DEV - every 4 hours)"
    cron: "0 11 * * *"  # Every 4 hours for testing
    command: "python -m src.connectors.garmin.garmin_fetch --data-types training_status --days 1"
    environment: "dev"
    enabled: true
    dependencies: ["GARMIN_USERNAME", "GARMIN_PASSWORD"]

  garmin_hrv:
    service: "garmin"
    data_type: "hrv"
    description: "Fetch hrv data from Garmin (DEV - every 4 hours)"
    cron: "0 11 * * *"  # Every 4 hours for testing
    command: "python -m src.connectors.garmin.garmin_fetch --data-types hrv --days 1"
    environment: "dev"
    enabled: true
    dependencies: ["GARMIN_USERNAME", "GARMIN_PASSWORD"]

  garmin_race_predictions:
    service: "garmin"
    data_type: "race_predictions"
    description: "Fetch race predictions data from Garmin (DEV - every 4 hours)"
    cron: "0 11 * * *"  # Every 4 hours for testing
    command: "python -m src.connectors.garmin.garmin_fetch --data-types race_predictions --days 1"
    environment: "dev"
    enabled: true
    dependencies: ["GARMIN_USERNAME", "GARMIN_PASSWORD"]

  garmin_floors:
    service: "garmin"
    data_type: "floors"
    description: "Fetch floors data from Garmin (DEV - every 4 hours)"
    cron: "0 11 * * *"  # Every 4 hours for testing
    command: "python -m src.connectors.garmin.garmin_fetch --data-types floors --days 1"
    environment: "dev"
    enabled: true
    dependencies: ["GARMIN_USERNAME", "GARMIN_PASSWORD"]

  # =================== TODOIST JOBS (DEV) ===================
  todoist_tasks:
    service: "todoist"
    data_type: "tasks"
    description: "Fetch tasks from Todoist (DEV - frequent testing)"
    cron: "0 */2 * * *"  # Every 2 hours for testing
    command: "python -m src.connectors.todoist.todoist tasks"
    environment: "dev"
    enabled: false
    dependencies: ["TODOIST_API_TOKEN"]

  todoist_projects:
    service: "todoist"
    data_type: "projects"
    description: "Fetch projects from Todoist (DEV - daily testing)"
    cron: "0 9 * * *"  # Daily at 9:00 UTC for testing
    command: "python -m src.connectors.todoist.todoist projects"
    environment: "dev"
    enabled: false
    dependencies: ["TODOIST_API_TOKEN"]

  # =================== INGESTION JOBS (DEV) ===================
  garmin_ingest:
    service: "garmin"
    data_type: "ingest"
    description: "Ingest Garmin data from GCS to BigQuery (DEV)"
    cron: "30 */2 * * *"  # 30 minutes after data fetch
    command: "python -m src.connectors.garmin.garmin_ingest --env dev"
    environment: "dev"
    enabled: true
    dependencies: ["GCP_SERVICE_ACCOUNT_KEY", "GCP_PROJECT_ID"]

  strava_ingest:
    service: "strava"
    data_type: "ingest"
    description: "Ingest Strava data from GCS to BigQuery (DEV)"
    cron: "30 */2 * * *"  # 30 minutes after data fetch
    command: "python -m src.connectors.strava.strava_ingest --env dev"
    environment: "dev"
    enabled: false
    dependencies: ["GCP_SERVICE_ACCOUNT_KEY", "GCP_PROJECT_ID"]

  spotify_ingest:
    service: "spotify"
    data_type: "ingest"
    description: "Ingest Spotify data from GCS to BigQuery (DEV)"
    cron: "30 * * * *"  # 30 minutes after hourly fetch
    command: "python -m src.connectors.spotify.spotify_ingest --env dev"
    environment: "dev"
    enabled: true
    dependencies: ["GCP_SERVICE_ACCOUNT_KEY", "GCP_PROJECT_ID"]

# Service-specific configuration
services:
  spotify:
    base_path: "src/connectors/spotify"
    fetch_script: "spotify_fetch.py"
    default_limit: 20  # Smaller limits for DEV
    supported_data_types: ["recently_played", "saved_tracks", "saved_albums", "playlists", "top_tracks", "top_artists"]
  
  strava:
    base_path: "src/connectors/strava"
    fetch_script: "strava.py"
    supported_data_types: ["activities", "athlete"]
  
  garmin:
    base_path: "src/connectors/garmin"
    fetch_script: "garmin_fetch.py"
    supported_data_types: ["activities", "sleep", "steps", "heart_rate", "body_battery", "stress", "training_status", "hrv", "race_predictions", "floors"]
  
  todoist:
    base_path: "src/connectors/todoist"
    fetch_script: "todoist.py"
    supported_data_types: ["tasks", "projects"]